/*
 *  Copyright (C) 2010 by Tim Massingham
 *  tim.massingham@ebi.ac.uk
 *
 *  This file is part of the AYB base-calling software.
 *
 *  AYB is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  AYB is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with AYB.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _ARRAY_GH
#define _ARRAY_GH
    #include <stdio.h>
    #include <stdlib.h>
    #include <stdint.h>
    #include <string.h>
    #include "utility.h"
    
    #define ARRAY(A)        struct _array_ ## A
    #define null_ARRAY(A)   (ARRAY(A)){NULL,0};
    #define new_ARRAY(A)    new_array_ ## A
    #define free_ARRAY(A)   free_array_ ## A
    #define copy_ARRAY(A)   copy_array_ ## A
    #define show_ARRAY(A)   show_array_ ## A
    #define read_ARRAY(A)   read_array_ ## A
#endif

#if !defined(X)
#error Necessary "X" macro not defined.
#endif

struct X(_array_) {
    X()   * elt;
    uint32_t nelt;
};

static struct X(_array_) X(new_array_) ( uint32_t nelt){
    struct X(_array_) arry = {0,0};
    arry.elt = calloc(nelt,sizeof(*arry.elt));
    if(NULL!=arry.elt){ arry.nelt = nelt;}
    return arry;
}

static void X(free_array_) ( struct X(_array_) arry ){
    xfree(arry.elt);
}

static struct X(_array_) X(copy_array_) ( const struct X(_array_) array ){
    struct X(_array_) new_array = {0,0};
    new_array.elt = calloc(array.nelt,sizeof(*new_array.elt));
    if(NULL==new_array.elt){ return new_array; }
    new_array.nelt = array.nelt;
    memcpy(new_array.elt,array.elt,array.nelt*sizeof(*new_array.elt));
    return new_array;
}

// Note: melt special value for printing all
static void X(show_array_) ( XFILE * fp, const struct X(_array_) array, const char * sep, const uint32_t melt ){
    validate(NULL!=fp,);
    validate(array.nelt>0,);

    uint32_t ub = (melt!=0 && melt<array.nelt)?melt:array.nelt;
    X(show_)(fp,array.elt[0]); 
    for ( uint32_t i=1 ; i<ub ; i++){
        xfputs(sep,fp);
        X(show_)(fp,array.elt[i]);
    }
    if( ub!=array.nelt ){ xfprintf(fp," ... %u more",array.nelt-ub);}
    xfputc('\n',fp);
}

static struct X(_array_) X(read_array_)( XFILE * fp, const uint32_t nelt){
    struct X(_array_) ary = X(new_array_)(nelt);
    validate(NULL!=ary.elt,ary);
    for ( uint32_t i=0 ; i<nelt ; i++){
        ary.elt[i] = X(read_)(fp);
    }
    return ary;
}
